
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Sermon` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Sermon
 * 
 */
export type SermonModel = runtime.Types.Result.DefaultSelection<Prisma.$SermonPayload>

export type AggregateSermon = {
  _count: SermonCountAggregateOutputType | null
  _min: SermonMinAggregateOutputType | null
  _max: SermonMaxAggregateOutputType | null
}

export type SermonMinAggregateOutputType = {
  id: string | null
  serviceType: $Enums.ServiceType | null
  theme: string | null
  title: string | null
  keyVerse: string | null
  introduction: string | null
  conclusion: string | null
  notes: string | null
  isFavorite: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
}

export type SermonMaxAggregateOutputType = {
  id: string | null
  serviceType: $Enums.ServiceType | null
  theme: string | null
  title: string | null
  keyVerse: string | null
  introduction: string | null
  conclusion: string | null
  notes: string | null
  isFavorite: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
}

export type SermonCountAggregateOutputType = {
  id: number
  serviceType: number
  theme: number
  title: number
  keyVerse: number
  introduction: number
  conclusion: number
  notes: number
  isFavorite: number
  createdAt: number
  updatedAt: number
  userId: number
  _all: number
}


export type SermonMinAggregateInputType = {
  id?: true
  serviceType?: true
  theme?: true
  title?: true
  keyVerse?: true
  introduction?: true
  conclusion?: true
  notes?: true
  isFavorite?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
}

export type SermonMaxAggregateInputType = {
  id?: true
  serviceType?: true
  theme?: true
  title?: true
  keyVerse?: true
  introduction?: true
  conclusion?: true
  notes?: true
  isFavorite?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
}

export type SermonCountAggregateInputType = {
  id?: true
  serviceType?: true
  theme?: true
  title?: true
  keyVerse?: true
  introduction?: true
  conclusion?: true
  notes?: true
  isFavorite?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  _all?: true
}

export type SermonAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Sermon to aggregate.
   */
  where?: Prisma.SermonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Sermons to fetch.
   */
  orderBy?: Prisma.SermonOrderByWithRelationInput | Prisma.SermonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SermonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Sermons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Sermons.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Sermons
  **/
  _count?: true | SermonCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SermonMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SermonMaxAggregateInputType
}

export type GetSermonAggregateType<T extends SermonAggregateArgs> = {
      [P in keyof T & keyof AggregateSermon]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSermon[P]>
    : Prisma.GetScalarType<T[P], AggregateSermon[P]>
}




export type SermonGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SermonWhereInput
  orderBy?: Prisma.SermonOrderByWithAggregationInput | Prisma.SermonOrderByWithAggregationInput[]
  by: Prisma.SermonScalarFieldEnum[] | Prisma.SermonScalarFieldEnum
  having?: Prisma.SermonScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SermonCountAggregateInputType | true
  _min?: SermonMinAggregateInputType
  _max?: SermonMaxAggregateInputType
}

export type SermonGroupByOutputType = {
  id: string
  serviceType: $Enums.ServiceType
  theme: string
  title: string
  keyVerse: string | null
  introduction: string | null
  conclusion: string | null
  notes: string | null
  isFavorite: boolean
  createdAt: Date
  updatedAt: Date
  userId: string
  _count: SermonCountAggregateOutputType | null
  _min: SermonMinAggregateOutputType | null
  _max: SermonMaxAggregateOutputType | null
}

type GetSermonGroupByPayload<T extends SermonGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SermonGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SermonGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SermonGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SermonGroupByOutputType[P]>
      }
    >
  >



export type SermonWhereInput = {
  AND?: Prisma.SermonWhereInput | Prisma.SermonWhereInput[]
  OR?: Prisma.SermonWhereInput[]
  NOT?: Prisma.SermonWhereInput | Prisma.SermonWhereInput[]
  id?: Prisma.StringFilter<"Sermon"> | string
  serviceType?: Prisma.EnumServiceTypeFilter<"Sermon"> | $Enums.ServiceType
  theme?: Prisma.StringFilter<"Sermon"> | string
  title?: Prisma.StringFilter<"Sermon"> | string
  keyVerse?: Prisma.StringNullableFilter<"Sermon"> | string | null
  introduction?: Prisma.StringNullableFilter<"Sermon"> | string | null
  conclusion?: Prisma.StringNullableFilter<"Sermon"> | string | null
  notes?: Prisma.StringNullableFilter<"Sermon"> | string | null
  isFavorite?: Prisma.BoolFilter<"Sermon"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Sermon"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Sermon"> | Date | string
  userId?: Prisma.StringFilter<"Sermon"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  mainPoints?: Prisma.MainPointListRelationFilter
}

export type SermonOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  serviceType?: Prisma.SortOrder
  theme?: Prisma.SortOrder
  title?: Prisma.SortOrder
  keyVerse?: Prisma.SortOrderInput | Prisma.SortOrder
  introduction?: Prisma.SortOrderInput | Prisma.SortOrder
  conclusion?: Prisma.SortOrderInput | Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  isFavorite?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  mainPoints?: Prisma.MainPointOrderByRelationAggregateInput
}

export type SermonWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.SermonWhereInput | Prisma.SermonWhereInput[]
  OR?: Prisma.SermonWhereInput[]
  NOT?: Prisma.SermonWhereInput | Prisma.SermonWhereInput[]
  serviceType?: Prisma.EnumServiceTypeFilter<"Sermon"> | $Enums.ServiceType
  theme?: Prisma.StringFilter<"Sermon"> | string
  title?: Prisma.StringFilter<"Sermon"> | string
  keyVerse?: Prisma.StringNullableFilter<"Sermon"> | string | null
  introduction?: Prisma.StringNullableFilter<"Sermon"> | string | null
  conclusion?: Prisma.StringNullableFilter<"Sermon"> | string | null
  notes?: Prisma.StringNullableFilter<"Sermon"> | string | null
  isFavorite?: Prisma.BoolFilter<"Sermon"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Sermon"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Sermon"> | Date | string
  userId?: Prisma.StringFilter<"Sermon"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  mainPoints?: Prisma.MainPointListRelationFilter
}, "id">

export type SermonOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  serviceType?: Prisma.SortOrder
  theme?: Prisma.SortOrder
  title?: Prisma.SortOrder
  keyVerse?: Prisma.SortOrderInput | Prisma.SortOrder
  introduction?: Prisma.SortOrderInput | Prisma.SortOrder
  conclusion?: Prisma.SortOrderInput | Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  isFavorite?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  _count?: Prisma.SermonCountOrderByAggregateInput
  _max?: Prisma.SermonMaxOrderByAggregateInput
  _min?: Prisma.SermonMinOrderByAggregateInput
}

export type SermonScalarWhereWithAggregatesInput = {
  AND?: Prisma.SermonScalarWhereWithAggregatesInput | Prisma.SermonScalarWhereWithAggregatesInput[]
  OR?: Prisma.SermonScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SermonScalarWhereWithAggregatesInput | Prisma.SermonScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Sermon"> | string
  serviceType?: Prisma.EnumServiceTypeWithAggregatesFilter<"Sermon"> | $Enums.ServiceType
  theme?: Prisma.StringWithAggregatesFilter<"Sermon"> | string
  title?: Prisma.StringWithAggregatesFilter<"Sermon"> | string
  keyVerse?: Prisma.StringNullableWithAggregatesFilter<"Sermon"> | string | null
  introduction?: Prisma.StringNullableWithAggregatesFilter<"Sermon"> | string | null
  conclusion?: Prisma.StringNullableWithAggregatesFilter<"Sermon"> | string | null
  notes?: Prisma.StringNullableWithAggregatesFilter<"Sermon"> | string | null
  isFavorite?: Prisma.BoolWithAggregatesFilter<"Sermon"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Sermon"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Sermon"> | Date | string
  userId?: Prisma.StringWithAggregatesFilter<"Sermon"> | string
}

export type SermonCreateInput = {
  id?: string
  serviceType: $Enums.ServiceType
  theme: string
  title: string
  keyVerse?: string | null
  introduction?: string | null
  conclusion?: string | null
  notes?: string | null
  isFavorite?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutSermonsInput
  mainPoints?: Prisma.MainPointCreateNestedManyWithoutSermonInput
}

export type SermonUncheckedCreateInput = {
  id?: string
  serviceType: $Enums.ServiceType
  theme: string
  title: string
  keyVerse?: string | null
  introduction?: string | null
  conclusion?: string | null
  notes?: string | null
  isFavorite?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  mainPoints?: Prisma.MainPointUncheckedCreateNestedManyWithoutSermonInput
}

export type SermonUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serviceType?: Prisma.EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
  theme?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  keyVerse?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  introduction?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  conclusion?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutSermonsNestedInput
  mainPoints?: Prisma.MainPointUpdateManyWithoutSermonNestedInput
}

export type SermonUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serviceType?: Prisma.EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
  theme?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  keyVerse?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  introduction?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  conclusion?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  mainPoints?: Prisma.MainPointUncheckedUpdateManyWithoutSermonNestedInput
}

export type SermonCreateManyInput = {
  id?: string
  serviceType: $Enums.ServiceType
  theme: string
  title: string
  keyVerse?: string | null
  introduction?: string | null
  conclusion?: string | null
  notes?: string | null
  isFavorite?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
}

export type SermonUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serviceType?: Prisma.EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
  theme?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  keyVerse?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  introduction?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  conclusion?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SermonUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serviceType?: Prisma.EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
  theme?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  keyVerse?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  introduction?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  conclusion?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SermonListRelationFilter = {
  every?: Prisma.SermonWhereInput
  some?: Prisma.SermonWhereInput
  none?: Prisma.SermonWhereInput
}

export type SermonOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type SermonCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  serviceType?: Prisma.SortOrder
  theme?: Prisma.SortOrder
  title?: Prisma.SortOrder
  keyVerse?: Prisma.SortOrder
  introduction?: Prisma.SortOrder
  conclusion?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  isFavorite?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type SermonMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  serviceType?: Prisma.SortOrder
  theme?: Prisma.SortOrder
  title?: Prisma.SortOrder
  keyVerse?: Prisma.SortOrder
  introduction?: Prisma.SortOrder
  conclusion?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  isFavorite?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type SermonMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  serviceType?: Prisma.SortOrder
  theme?: Prisma.SortOrder
  title?: Prisma.SortOrder
  keyVerse?: Prisma.SortOrder
  introduction?: Prisma.SortOrder
  conclusion?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  isFavorite?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type SermonScalarRelationFilter = {
  is?: Prisma.SermonWhereInput
  isNot?: Prisma.SermonWhereInput
}

export type SermonCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.SermonCreateWithoutUserInput, Prisma.SermonUncheckedCreateWithoutUserInput> | Prisma.SermonCreateWithoutUserInput[] | Prisma.SermonUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SermonCreateOrConnectWithoutUserInput | Prisma.SermonCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.SermonCreateManyUserInputEnvelope
  connect?: Prisma.SermonWhereUniqueInput | Prisma.SermonWhereUniqueInput[]
}

export type SermonUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.SermonCreateWithoutUserInput, Prisma.SermonUncheckedCreateWithoutUserInput> | Prisma.SermonCreateWithoutUserInput[] | Prisma.SermonUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SermonCreateOrConnectWithoutUserInput | Prisma.SermonCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.SermonCreateManyUserInputEnvelope
  connect?: Prisma.SermonWhereUniqueInput | Prisma.SermonWhereUniqueInput[]
}

export type SermonUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.SermonCreateWithoutUserInput, Prisma.SermonUncheckedCreateWithoutUserInput> | Prisma.SermonCreateWithoutUserInput[] | Prisma.SermonUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SermonCreateOrConnectWithoutUserInput | Prisma.SermonCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.SermonUpsertWithWhereUniqueWithoutUserInput | Prisma.SermonUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.SermonCreateManyUserInputEnvelope
  set?: Prisma.SermonWhereUniqueInput | Prisma.SermonWhereUniqueInput[]
  disconnect?: Prisma.SermonWhereUniqueInput | Prisma.SermonWhereUniqueInput[]
  delete?: Prisma.SermonWhereUniqueInput | Prisma.SermonWhereUniqueInput[]
  connect?: Prisma.SermonWhereUniqueInput | Prisma.SermonWhereUniqueInput[]
  update?: Prisma.SermonUpdateWithWhereUniqueWithoutUserInput | Prisma.SermonUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.SermonUpdateManyWithWhereWithoutUserInput | Prisma.SermonUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.SermonScalarWhereInput | Prisma.SermonScalarWhereInput[]
}

export type SermonUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.SermonCreateWithoutUserInput, Prisma.SermonUncheckedCreateWithoutUserInput> | Prisma.SermonCreateWithoutUserInput[] | Prisma.SermonUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SermonCreateOrConnectWithoutUserInput | Prisma.SermonCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.SermonUpsertWithWhereUniqueWithoutUserInput | Prisma.SermonUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.SermonCreateManyUserInputEnvelope
  set?: Prisma.SermonWhereUniqueInput | Prisma.SermonWhereUniqueInput[]
  disconnect?: Prisma.SermonWhereUniqueInput | Prisma.SermonWhereUniqueInput[]
  delete?: Prisma.SermonWhereUniqueInput | Prisma.SermonWhereUniqueInput[]
  connect?: Prisma.SermonWhereUniqueInput | Prisma.SermonWhereUniqueInput[]
  update?: Prisma.SermonUpdateWithWhereUniqueWithoutUserInput | Prisma.SermonUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.SermonUpdateManyWithWhereWithoutUserInput | Prisma.SermonUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.SermonScalarWhereInput | Prisma.SermonScalarWhereInput[]
}

export type EnumServiceTypeFieldUpdateOperationsInput = {
  set?: $Enums.ServiceType
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type SermonCreateNestedOneWithoutMainPointsInput = {
  create?: Prisma.XOR<Prisma.SermonCreateWithoutMainPointsInput, Prisma.SermonUncheckedCreateWithoutMainPointsInput>
  connectOrCreate?: Prisma.SermonCreateOrConnectWithoutMainPointsInput
  connect?: Prisma.SermonWhereUniqueInput
}

export type SermonUpdateOneRequiredWithoutMainPointsNestedInput = {
  create?: Prisma.XOR<Prisma.SermonCreateWithoutMainPointsInput, Prisma.SermonUncheckedCreateWithoutMainPointsInput>
  connectOrCreate?: Prisma.SermonCreateOrConnectWithoutMainPointsInput
  upsert?: Prisma.SermonUpsertWithoutMainPointsInput
  connect?: Prisma.SermonWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SermonUpdateToOneWithWhereWithoutMainPointsInput, Prisma.SermonUpdateWithoutMainPointsInput>, Prisma.SermonUncheckedUpdateWithoutMainPointsInput>
}

export type SermonCreateWithoutUserInput = {
  id?: string
  serviceType: $Enums.ServiceType
  theme: string
  title: string
  keyVerse?: string | null
  introduction?: string | null
  conclusion?: string | null
  notes?: string | null
  isFavorite?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  mainPoints?: Prisma.MainPointCreateNestedManyWithoutSermonInput
}

export type SermonUncheckedCreateWithoutUserInput = {
  id?: string
  serviceType: $Enums.ServiceType
  theme: string
  title: string
  keyVerse?: string | null
  introduction?: string | null
  conclusion?: string | null
  notes?: string | null
  isFavorite?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  mainPoints?: Prisma.MainPointUncheckedCreateNestedManyWithoutSermonInput
}

export type SermonCreateOrConnectWithoutUserInput = {
  where: Prisma.SermonWhereUniqueInput
  create: Prisma.XOR<Prisma.SermonCreateWithoutUserInput, Prisma.SermonUncheckedCreateWithoutUserInput>
}

export type SermonCreateManyUserInputEnvelope = {
  data: Prisma.SermonCreateManyUserInput | Prisma.SermonCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type SermonUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.SermonWhereUniqueInput
  update: Prisma.XOR<Prisma.SermonUpdateWithoutUserInput, Prisma.SermonUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.SermonCreateWithoutUserInput, Prisma.SermonUncheckedCreateWithoutUserInput>
}

export type SermonUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.SermonWhereUniqueInput
  data: Prisma.XOR<Prisma.SermonUpdateWithoutUserInput, Prisma.SermonUncheckedUpdateWithoutUserInput>
}

export type SermonUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.SermonScalarWhereInput
  data: Prisma.XOR<Prisma.SermonUpdateManyMutationInput, Prisma.SermonUncheckedUpdateManyWithoutUserInput>
}

export type SermonScalarWhereInput = {
  AND?: Prisma.SermonScalarWhereInput | Prisma.SermonScalarWhereInput[]
  OR?: Prisma.SermonScalarWhereInput[]
  NOT?: Prisma.SermonScalarWhereInput | Prisma.SermonScalarWhereInput[]
  id?: Prisma.StringFilter<"Sermon"> | string
  serviceType?: Prisma.EnumServiceTypeFilter<"Sermon"> | $Enums.ServiceType
  theme?: Prisma.StringFilter<"Sermon"> | string
  title?: Prisma.StringFilter<"Sermon"> | string
  keyVerse?: Prisma.StringNullableFilter<"Sermon"> | string | null
  introduction?: Prisma.StringNullableFilter<"Sermon"> | string | null
  conclusion?: Prisma.StringNullableFilter<"Sermon"> | string | null
  notes?: Prisma.StringNullableFilter<"Sermon"> | string | null
  isFavorite?: Prisma.BoolFilter<"Sermon"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Sermon"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Sermon"> | Date | string
  userId?: Prisma.StringFilter<"Sermon"> | string
}

export type SermonCreateWithoutMainPointsInput = {
  id?: string
  serviceType: $Enums.ServiceType
  theme: string
  title: string
  keyVerse?: string | null
  introduction?: string | null
  conclusion?: string | null
  notes?: string | null
  isFavorite?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutSermonsInput
}

export type SermonUncheckedCreateWithoutMainPointsInput = {
  id?: string
  serviceType: $Enums.ServiceType
  theme: string
  title: string
  keyVerse?: string | null
  introduction?: string | null
  conclusion?: string | null
  notes?: string | null
  isFavorite?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
}

export type SermonCreateOrConnectWithoutMainPointsInput = {
  where: Prisma.SermonWhereUniqueInput
  create: Prisma.XOR<Prisma.SermonCreateWithoutMainPointsInput, Prisma.SermonUncheckedCreateWithoutMainPointsInput>
}

export type SermonUpsertWithoutMainPointsInput = {
  update: Prisma.XOR<Prisma.SermonUpdateWithoutMainPointsInput, Prisma.SermonUncheckedUpdateWithoutMainPointsInput>
  create: Prisma.XOR<Prisma.SermonCreateWithoutMainPointsInput, Prisma.SermonUncheckedCreateWithoutMainPointsInput>
  where?: Prisma.SermonWhereInput
}

export type SermonUpdateToOneWithWhereWithoutMainPointsInput = {
  where?: Prisma.SermonWhereInput
  data: Prisma.XOR<Prisma.SermonUpdateWithoutMainPointsInput, Prisma.SermonUncheckedUpdateWithoutMainPointsInput>
}

export type SermonUpdateWithoutMainPointsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serviceType?: Prisma.EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
  theme?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  keyVerse?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  introduction?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  conclusion?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutSermonsNestedInput
}

export type SermonUncheckedUpdateWithoutMainPointsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serviceType?: Prisma.EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
  theme?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  keyVerse?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  introduction?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  conclusion?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SermonCreateManyUserInput = {
  id?: string
  serviceType: $Enums.ServiceType
  theme: string
  title: string
  keyVerse?: string | null
  introduction?: string | null
  conclusion?: string | null
  notes?: string | null
  isFavorite?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SermonUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serviceType?: Prisma.EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
  theme?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  keyVerse?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  introduction?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  conclusion?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mainPoints?: Prisma.MainPointUpdateManyWithoutSermonNestedInput
}

export type SermonUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serviceType?: Prisma.EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
  theme?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  keyVerse?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  introduction?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  conclusion?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mainPoints?: Prisma.MainPointUncheckedUpdateManyWithoutSermonNestedInput
}

export type SermonUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serviceType?: Prisma.EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
  theme?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  keyVerse?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  introduction?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  conclusion?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isFavorite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type SermonCountOutputType
 */

export type SermonCountOutputType = {
  mainPoints: number
}

export type SermonCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mainPoints?: boolean | SermonCountOutputTypeCountMainPointsArgs
}

/**
 * SermonCountOutputType without action
 */
export type SermonCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SermonCountOutputType
   */
  select?: Prisma.SermonCountOutputTypeSelect<ExtArgs> | null
}

/**
 * SermonCountOutputType without action
 */
export type SermonCountOutputTypeCountMainPointsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MainPointWhereInput
}


export type SermonSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  serviceType?: boolean
  theme?: boolean
  title?: boolean
  keyVerse?: boolean
  introduction?: boolean
  conclusion?: boolean
  notes?: boolean
  isFavorite?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  mainPoints?: boolean | Prisma.Sermon$mainPointsArgs<ExtArgs>
  _count?: boolean | Prisma.SermonCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["sermon"]>

export type SermonSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  serviceType?: boolean
  theme?: boolean
  title?: boolean
  keyVerse?: boolean
  introduction?: boolean
  conclusion?: boolean
  notes?: boolean
  isFavorite?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["sermon"]>

export type SermonSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  serviceType?: boolean
  theme?: boolean
  title?: boolean
  keyVerse?: boolean
  introduction?: boolean
  conclusion?: boolean
  notes?: boolean
  isFavorite?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["sermon"]>

export type SermonSelectScalar = {
  id?: boolean
  serviceType?: boolean
  theme?: boolean
  title?: boolean
  keyVerse?: boolean
  introduction?: boolean
  conclusion?: boolean
  notes?: boolean
  isFavorite?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
}

export type SermonOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "serviceType" | "theme" | "title" | "keyVerse" | "introduction" | "conclusion" | "notes" | "isFavorite" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["sermon"]>
export type SermonInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  mainPoints?: boolean | Prisma.Sermon$mainPointsArgs<ExtArgs>
  _count?: boolean | Prisma.SermonCountOutputTypeDefaultArgs<ExtArgs>
}
export type SermonIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type SermonIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $SermonPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Sermon"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    mainPoints: Prisma.$MainPointPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    serviceType: $Enums.ServiceType
    theme: string
    title: string
    keyVerse: string | null
    introduction: string | null
    conclusion: string | null
    notes: string | null
    isFavorite: boolean
    createdAt: Date
    updatedAt: Date
    userId: string
  }, ExtArgs["result"]["sermon"]>
  composites: {}
}

export type SermonGetPayload<S extends boolean | null | undefined | SermonDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SermonPayload, S>

export type SermonCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SermonFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SermonCountAggregateInputType | true
  }

export interface SermonDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sermon'], meta: { name: 'Sermon' } }
  /**
   * Find zero or one Sermon that matches the filter.
   * @param {SermonFindUniqueArgs} args - Arguments to find a Sermon
   * @example
   * // Get one Sermon
   * const sermon = await prisma.sermon.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SermonFindUniqueArgs>(args: Prisma.SelectSubset<T, SermonFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SermonClient<runtime.Types.Result.GetResult<Prisma.$SermonPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Sermon that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SermonFindUniqueOrThrowArgs} args - Arguments to find a Sermon
   * @example
   * // Get one Sermon
   * const sermon = await prisma.sermon.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SermonFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SermonFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SermonClient<runtime.Types.Result.GetResult<Prisma.$SermonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Sermon that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SermonFindFirstArgs} args - Arguments to find a Sermon
   * @example
   * // Get one Sermon
   * const sermon = await prisma.sermon.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SermonFindFirstArgs>(args?: Prisma.SelectSubset<T, SermonFindFirstArgs<ExtArgs>>): Prisma.Prisma__SermonClient<runtime.Types.Result.GetResult<Prisma.$SermonPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Sermon that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SermonFindFirstOrThrowArgs} args - Arguments to find a Sermon
   * @example
   * // Get one Sermon
   * const sermon = await prisma.sermon.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SermonFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SermonFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SermonClient<runtime.Types.Result.GetResult<Prisma.$SermonPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Sermons that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SermonFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Sermons
   * const sermons = await prisma.sermon.findMany()
   * 
   * // Get first 10 Sermons
   * const sermons = await prisma.sermon.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const sermonWithIdOnly = await prisma.sermon.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SermonFindManyArgs>(args?: Prisma.SelectSubset<T, SermonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SermonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Sermon.
   * @param {SermonCreateArgs} args - Arguments to create a Sermon.
   * @example
   * // Create one Sermon
   * const Sermon = await prisma.sermon.create({
   *   data: {
   *     // ... data to create a Sermon
   *   }
   * })
   * 
   */
  create<T extends SermonCreateArgs>(args: Prisma.SelectSubset<T, SermonCreateArgs<ExtArgs>>): Prisma.Prisma__SermonClient<runtime.Types.Result.GetResult<Prisma.$SermonPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Sermons.
   * @param {SermonCreateManyArgs} args - Arguments to create many Sermons.
   * @example
   * // Create many Sermons
   * const sermon = await prisma.sermon.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SermonCreateManyArgs>(args?: Prisma.SelectSubset<T, SermonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Sermons and returns the data saved in the database.
   * @param {SermonCreateManyAndReturnArgs} args - Arguments to create many Sermons.
   * @example
   * // Create many Sermons
   * const sermon = await prisma.sermon.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Sermons and only return the `id`
   * const sermonWithIdOnly = await prisma.sermon.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SermonCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SermonCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SermonPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Sermon.
   * @param {SermonDeleteArgs} args - Arguments to delete one Sermon.
   * @example
   * // Delete one Sermon
   * const Sermon = await prisma.sermon.delete({
   *   where: {
   *     // ... filter to delete one Sermon
   *   }
   * })
   * 
   */
  delete<T extends SermonDeleteArgs>(args: Prisma.SelectSubset<T, SermonDeleteArgs<ExtArgs>>): Prisma.Prisma__SermonClient<runtime.Types.Result.GetResult<Prisma.$SermonPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Sermon.
   * @param {SermonUpdateArgs} args - Arguments to update one Sermon.
   * @example
   * // Update one Sermon
   * const sermon = await prisma.sermon.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SermonUpdateArgs>(args: Prisma.SelectSubset<T, SermonUpdateArgs<ExtArgs>>): Prisma.Prisma__SermonClient<runtime.Types.Result.GetResult<Prisma.$SermonPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Sermons.
   * @param {SermonDeleteManyArgs} args - Arguments to filter Sermons to delete.
   * @example
   * // Delete a few Sermons
   * const { count } = await prisma.sermon.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SermonDeleteManyArgs>(args?: Prisma.SelectSubset<T, SermonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Sermons.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SermonUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Sermons
   * const sermon = await prisma.sermon.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SermonUpdateManyArgs>(args: Prisma.SelectSubset<T, SermonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Sermons and returns the data updated in the database.
   * @param {SermonUpdateManyAndReturnArgs} args - Arguments to update many Sermons.
   * @example
   * // Update many Sermons
   * const sermon = await prisma.sermon.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Sermons and only return the `id`
   * const sermonWithIdOnly = await prisma.sermon.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SermonUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SermonUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SermonPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Sermon.
   * @param {SermonUpsertArgs} args - Arguments to update or create a Sermon.
   * @example
   * // Update or create a Sermon
   * const sermon = await prisma.sermon.upsert({
   *   create: {
   *     // ... data to create a Sermon
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Sermon we want to update
   *   }
   * })
   */
  upsert<T extends SermonUpsertArgs>(args: Prisma.SelectSubset<T, SermonUpsertArgs<ExtArgs>>): Prisma.Prisma__SermonClient<runtime.Types.Result.GetResult<Prisma.$SermonPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Sermons.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SermonCountArgs} args - Arguments to filter Sermons to count.
   * @example
   * // Count the number of Sermons
   * const count = await prisma.sermon.count({
   *   where: {
   *     // ... the filter for the Sermons we want to count
   *   }
   * })
  **/
  count<T extends SermonCountArgs>(
    args?: Prisma.Subset<T, SermonCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SermonCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Sermon.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SermonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SermonAggregateArgs>(args: Prisma.Subset<T, SermonAggregateArgs>): Prisma.PrismaPromise<GetSermonAggregateType<T>>

  /**
   * Group by Sermon.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SermonGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SermonGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SermonGroupByArgs['orderBy'] }
      : { orderBy?: SermonGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SermonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSermonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Sermon model
 */
readonly fields: SermonFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Sermon.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SermonClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  mainPoints<T extends Prisma.Sermon$mainPointsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Sermon$mainPointsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MainPointPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Sermon model
 */
export interface SermonFieldRefs {
  readonly id: Prisma.FieldRef<"Sermon", 'String'>
  readonly serviceType: Prisma.FieldRef<"Sermon", 'ServiceType'>
  readonly theme: Prisma.FieldRef<"Sermon", 'String'>
  readonly title: Prisma.FieldRef<"Sermon", 'String'>
  readonly keyVerse: Prisma.FieldRef<"Sermon", 'String'>
  readonly introduction: Prisma.FieldRef<"Sermon", 'String'>
  readonly conclusion: Prisma.FieldRef<"Sermon", 'String'>
  readonly notes: Prisma.FieldRef<"Sermon", 'String'>
  readonly isFavorite: Prisma.FieldRef<"Sermon", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"Sermon", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Sermon", 'DateTime'>
  readonly userId: Prisma.FieldRef<"Sermon", 'String'>
}
    

// Custom InputTypes
/**
 * Sermon findUnique
 */
export type SermonFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sermon
   */
  select?: Prisma.SermonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sermon
   */
  omit?: Prisma.SermonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SermonInclude<ExtArgs> | null
  /**
   * Filter, which Sermon to fetch.
   */
  where: Prisma.SermonWhereUniqueInput
}

/**
 * Sermon findUniqueOrThrow
 */
export type SermonFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sermon
   */
  select?: Prisma.SermonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sermon
   */
  omit?: Prisma.SermonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SermonInclude<ExtArgs> | null
  /**
   * Filter, which Sermon to fetch.
   */
  where: Prisma.SermonWhereUniqueInput
}

/**
 * Sermon findFirst
 */
export type SermonFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sermon
   */
  select?: Prisma.SermonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sermon
   */
  omit?: Prisma.SermonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SermonInclude<ExtArgs> | null
  /**
   * Filter, which Sermon to fetch.
   */
  where?: Prisma.SermonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Sermons to fetch.
   */
  orderBy?: Prisma.SermonOrderByWithRelationInput | Prisma.SermonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Sermons.
   */
  cursor?: Prisma.SermonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Sermons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Sermons.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Sermons.
   */
  distinct?: Prisma.SermonScalarFieldEnum | Prisma.SermonScalarFieldEnum[]
}

/**
 * Sermon findFirstOrThrow
 */
export type SermonFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sermon
   */
  select?: Prisma.SermonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sermon
   */
  omit?: Prisma.SermonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SermonInclude<ExtArgs> | null
  /**
   * Filter, which Sermon to fetch.
   */
  where?: Prisma.SermonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Sermons to fetch.
   */
  orderBy?: Prisma.SermonOrderByWithRelationInput | Prisma.SermonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Sermons.
   */
  cursor?: Prisma.SermonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Sermons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Sermons.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Sermons.
   */
  distinct?: Prisma.SermonScalarFieldEnum | Prisma.SermonScalarFieldEnum[]
}

/**
 * Sermon findMany
 */
export type SermonFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sermon
   */
  select?: Prisma.SermonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sermon
   */
  omit?: Prisma.SermonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SermonInclude<ExtArgs> | null
  /**
   * Filter, which Sermons to fetch.
   */
  where?: Prisma.SermonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Sermons to fetch.
   */
  orderBy?: Prisma.SermonOrderByWithRelationInput | Prisma.SermonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Sermons.
   */
  cursor?: Prisma.SermonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Sermons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Sermons.
   */
  skip?: number
  distinct?: Prisma.SermonScalarFieldEnum | Prisma.SermonScalarFieldEnum[]
}

/**
 * Sermon create
 */
export type SermonCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sermon
   */
  select?: Prisma.SermonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sermon
   */
  omit?: Prisma.SermonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SermonInclude<ExtArgs> | null
  /**
   * The data needed to create a Sermon.
   */
  data: Prisma.XOR<Prisma.SermonCreateInput, Prisma.SermonUncheckedCreateInput>
}

/**
 * Sermon createMany
 */
export type SermonCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Sermons.
   */
  data: Prisma.SermonCreateManyInput | Prisma.SermonCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Sermon createManyAndReturn
 */
export type SermonCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sermon
   */
  select?: Prisma.SermonSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Sermon
   */
  omit?: Prisma.SermonOmit<ExtArgs> | null
  /**
   * The data used to create many Sermons.
   */
  data: Prisma.SermonCreateManyInput | Prisma.SermonCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SermonIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Sermon update
 */
export type SermonUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sermon
   */
  select?: Prisma.SermonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sermon
   */
  omit?: Prisma.SermonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SermonInclude<ExtArgs> | null
  /**
   * The data needed to update a Sermon.
   */
  data: Prisma.XOR<Prisma.SermonUpdateInput, Prisma.SermonUncheckedUpdateInput>
  /**
   * Choose, which Sermon to update.
   */
  where: Prisma.SermonWhereUniqueInput
}

/**
 * Sermon updateMany
 */
export type SermonUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Sermons.
   */
  data: Prisma.XOR<Prisma.SermonUpdateManyMutationInput, Prisma.SermonUncheckedUpdateManyInput>
  /**
   * Filter which Sermons to update
   */
  where?: Prisma.SermonWhereInput
  /**
   * Limit how many Sermons to update.
   */
  limit?: number
}

/**
 * Sermon updateManyAndReturn
 */
export type SermonUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sermon
   */
  select?: Prisma.SermonSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Sermon
   */
  omit?: Prisma.SermonOmit<ExtArgs> | null
  /**
   * The data used to update Sermons.
   */
  data: Prisma.XOR<Prisma.SermonUpdateManyMutationInput, Prisma.SermonUncheckedUpdateManyInput>
  /**
   * Filter which Sermons to update
   */
  where?: Prisma.SermonWhereInput
  /**
   * Limit how many Sermons to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SermonIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Sermon upsert
 */
export type SermonUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sermon
   */
  select?: Prisma.SermonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sermon
   */
  omit?: Prisma.SermonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SermonInclude<ExtArgs> | null
  /**
   * The filter to search for the Sermon to update in case it exists.
   */
  where: Prisma.SermonWhereUniqueInput
  /**
   * In case the Sermon found by the `where` argument doesn't exist, create a new Sermon with this data.
   */
  create: Prisma.XOR<Prisma.SermonCreateInput, Prisma.SermonUncheckedCreateInput>
  /**
   * In case the Sermon was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SermonUpdateInput, Prisma.SermonUncheckedUpdateInput>
}

/**
 * Sermon delete
 */
export type SermonDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sermon
   */
  select?: Prisma.SermonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sermon
   */
  omit?: Prisma.SermonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SermonInclude<ExtArgs> | null
  /**
   * Filter which Sermon to delete.
   */
  where: Prisma.SermonWhereUniqueInput
}

/**
 * Sermon deleteMany
 */
export type SermonDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Sermons to delete
   */
  where?: Prisma.SermonWhereInput
  /**
   * Limit how many Sermons to delete.
   */
  limit?: number
}

/**
 * Sermon.mainPoints
 */
export type Sermon$mainPointsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MainPoint
   */
  select?: Prisma.MainPointSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MainPoint
   */
  omit?: Prisma.MainPointOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MainPointInclude<ExtArgs> | null
  where?: Prisma.MainPointWhereInput
  orderBy?: Prisma.MainPointOrderByWithRelationInput | Prisma.MainPointOrderByWithRelationInput[]
  cursor?: Prisma.MainPointWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MainPointScalarFieldEnum | Prisma.MainPointScalarFieldEnum[]
}

/**
 * Sermon without action
 */
export type SermonDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sermon
   */
  select?: Prisma.SermonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sermon
   */
  omit?: Prisma.SermonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SermonInclude<ExtArgs> | null
}
