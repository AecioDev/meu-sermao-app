
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `MainPoint` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MainPoint
 * 
 */
export type MainPointModel = runtime.Types.Result.DefaultSelection<Prisma.$MainPointPayload>

export type AggregateMainPoint = {
  _count: MainPointCountAggregateOutputType | null
  _min: MainPointMinAggregateOutputType | null
  _max: MainPointMaxAggregateOutputType | null
}

export type MainPointMinAggregateOutputType = {
  id: string | null
  title: string | null
  explanation: string | null
  createdAt: Date | null
  updatedAt: Date | null
  sermonId: string | null
}

export type MainPointMaxAggregateOutputType = {
  id: string | null
  title: string | null
  explanation: string | null
  createdAt: Date | null
  updatedAt: Date | null
  sermonId: string | null
}

export type MainPointCountAggregateOutputType = {
  id: number
  title: number
  explanation: number
  scriptureReferences: number
  createdAt: number
  updatedAt: number
  sermonId: number
  _all: number
}


export type MainPointMinAggregateInputType = {
  id?: true
  title?: true
  explanation?: true
  createdAt?: true
  updatedAt?: true
  sermonId?: true
}

export type MainPointMaxAggregateInputType = {
  id?: true
  title?: true
  explanation?: true
  createdAt?: true
  updatedAt?: true
  sermonId?: true
}

export type MainPointCountAggregateInputType = {
  id?: true
  title?: true
  explanation?: true
  scriptureReferences?: true
  createdAt?: true
  updatedAt?: true
  sermonId?: true
  _all?: true
}

export type MainPointAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MainPoint to aggregate.
   */
  where?: Prisma.MainPointWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MainPoints to fetch.
   */
  orderBy?: Prisma.MainPointOrderByWithRelationInput | Prisma.MainPointOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MainPointWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MainPoints from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MainPoints.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MainPoints
  **/
  _count?: true | MainPointCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MainPointMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MainPointMaxAggregateInputType
}

export type GetMainPointAggregateType<T extends MainPointAggregateArgs> = {
      [P in keyof T & keyof AggregateMainPoint]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMainPoint[P]>
    : Prisma.GetScalarType<T[P], AggregateMainPoint[P]>
}




export type MainPointGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MainPointWhereInput
  orderBy?: Prisma.MainPointOrderByWithAggregationInput | Prisma.MainPointOrderByWithAggregationInput[]
  by: Prisma.MainPointScalarFieldEnum[] | Prisma.MainPointScalarFieldEnum
  having?: Prisma.MainPointScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MainPointCountAggregateInputType | true
  _min?: MainPointMinAggregateInputType
  _max?: MainPointMaxAggregateInputType
}

export type MainPointGroupByOutputType = {
  id: string
  title: string
  explanation: string
  scriptureReferences: string[]
  createdAt: Date
  updatedAt: Date
  sermonId: string
  _count: MainPointCountAggregateOutputType | null
  _min: MainPointMinAggregateOutputType | null
  _max: MainPointMaxAggregateOutputType | null
}

type GetMainPointGroupByPayload<T extends MainPointGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MainPointGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MainPointGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MainPointGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MainPointGroupByOutputType[P]>
      }
    >
  >



export type MainPointWhereInput = {
  AND?: Prisma.MainPointWhereInput | Prisma.MainPointWhereInput[]
  OR?: Prisma.MainPointWhereInput[]
  NOT?: Prisma.MainPointWhereInput | Prisma.MainPointWhereInput[]
  id?: Prisma.StringFilter<"MainPoint"> | string
  title?: Prisma.StringFilter<"MainPoint"> | string
  explanation?: Prisma.StringFilter<"MainPoint"> | string
  scriptureReferences?: Prisma.StringNullableListFilter<"MainPoint">
  createdAt?: Prisma.DateTimeFilter<"MainPoint"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MainPoint"> | Date | string
  sermonId?: Prisma.StringFilter<"MainPoint"> | string
  sermon?: Prisma.XOR<Prisma.SermonScalarRelationFilter, Prisma.SermonWhereInput>
}

export type MainPointOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  explanation?: Prisma.SortOrder
  scriptureReferences?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  sermonId?: Prisma.SortOrder
  sermon?: Prisma.SermonOrderByWithRelationInput
}

export type MainPointWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.MainPointWhereInput | Prisma.MainPointWhereInput[]
  OR?: Prisma.MainPointWhereInput[]
  NOT?: Prisma.MainPointWhereInput | Prisma.MainPointWhereInput[]
  title?: Prisma.StringFilter<"MainPoint"> | string
  explanation?: Prisma.StringFilter<"MainPoint"> | string
  scriptureReferences?: Prisma.StringNullableListFilter<"MainPoint">
  createdAt?: Prisma.DateTimeFilter<"MainPoint"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MainPoint"> | Date | string
  sermonId?: Prisma.StringFilter<"MainPoint"> | string
  sermon?: Prisma.XOR<Prisma.SermonScalarRelationFilter, Prisma.SermonWhereInput>
}, "id">

export type MainPointOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  explanation?: Prisma.SortOrder
  scriptureReferences?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  sermonId?: Prisma.SortOrder
  _count?: Prisma.MainPointCountOrderByAggregateInput
  _max?: Prisma.MainPointMaxOrderByAggregateInput
  _min?: Prisma.MainPointMinOrderByAggregateInput
}

export type MainPointScalarWhereWithAggregatesInput = {
  AND?: Prisma.MainPointScalarWhereWithAggregatesInput | Prisma.MainPointScalarWhereWithAggregatesInput[]
  OR?: Prisma.MainPointScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MainPointScalarWhereWithAggregatesInput | Prisma.MainPointScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MainPoint"> | string
  title?: Prisma.StringWithAggregatesFilter<"MainPoint"> | string
  explanation?: Prisma.StringWithAggregatesFilter<"MainPoint"> | string
  scriptureReferences?: Prisma.StringNullableListFilter<"MainPoint">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MainPoint"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"MainPoint"> | Date | string
  sermonId?: Prisma.StringWithAggregatesFilter<"MainPoint"> | string
}

export type MainPointCreateInput = {
  id?: string
  title: string
  explanation: string
  scriptureReferences?: Prisma.MainPointCreatescriptureReferencesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  sermon: Prisma.SermonCreateNestedOneWithoutMainPointsInput
}

export type MainPointUncheckedCreateInput = {
  id?: string
  title: string
  explanation: string
  scriptureReferences?: Prisma.MainPointCreatescriptureReferencesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  sermonId: string
}

export type MainPointUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.StringFieldUpdateOperationsInput | string
  scriptureReferences?: Prisma.MainPointUpdatescriptureReferencesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sermon?: Prisma.SermonUpdateOneRequiredWithoutMainPointsNestedInput
}

export type MainPointUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.StringFieldUpdateOperationsInput | string
  scriptureReferences?: Prisma.MainPointUpdatescriptureReferencesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sermonId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MainPointCreateManyInput = {
  id?: string
  title: string
  explanation: string
  scriptureReferences?: Prisma.MainPointCreatescriptureReferencesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  sermonId: string
}

export type MainPointUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.StringFieldUpdateOperationsInput | string
  scriptureReferences?: Prisma.MainPointUpdatescriptureReferencesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MainPointUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.StringFieldUpdateOperationsInput | string
  scriptureReferences?: Prisma.MainPointUpdatescriptureReferencesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sermonId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MainPointListRelationFilter = {
  every?: Prisma.MainPointWhereInput
  some?: Prisma.MainPointWhereInput
  none?: Prisma.MainPointWhereInput
}

export type MainPointOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StringNullableListFilter<$PrismaModel = never> = {
  equals?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel> | null
  has?: string | Prisma.StringFieldRefInput<$PrismaModel> | null
  hasEvery?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  hasSome?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type MainPointCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  explanation?: Prisma.SortOrder
  scriptureReferences?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  sermonId?: Prisma.SortOrder
}

export type MainPointMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  explanation?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  sermonId?: Prisma.SortOrder
}

export type MainPointMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  explanation?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  sermonId?: Prisma.SortOrder
}

export type MainPointCreateNestedManyWithoutSermonInput = {
  create?: Prisma.XOR<Prisma.MainPointCreateWithoutSermonInput, Prisma.MainPointUncheckedCreateWithoutSermonInput> | Prisma.MainPointCreateWithoutSermonInput[] | Prisma.MainPointUncheckedCreateWithoutSermonInput[]
  connectOrCreate?: Prisma.MainPointCreateOrConnectWithoutSermonInput | Prisma.MainPointCreateOrConnectWithoutSermonInput[]
  createMany?: Prisma.MainPointCreateManySermonInputEnvelope
  connect?: Prisma.MainPointWhereUniqueInput | Prisma.MainPointWhereUniqueInput[]
}

export type MainPointUncheckedCreateNestedManyWithoutSermonInput = {
  create?: Prisma.XOR<Prisma.MainPointCreateWithoutSermonInput, Prisma.MainPointUncheckedCreateWithoutSermonInput> | Prisma.MainPointCreateWithoutSermonInput[] | Prisma.MainPointUncheckedCreateWithoutSermonInput[]
  connectOrCreate?: Prisma.MainPointCreateOrConnectWithoutSermonInput | Prisma.MainPointCreateOrConnectWithoutSermonInput[]
  createMany?: Prisma.MainPointCreateManySermonInputEnvelope
  connect?: Prisma.MainPointWhereUniqueInput | Prisma.MainPointWhereUniqueInput[]
}

export type MainPointUpdateManyWithoutSermonNestedInput = {
  create?: Prisma.XOR<Prisma.MainPointCreateWithoutSermonInput, Prisma.MainPointUncheckedCreateWithoutSermonInput> | Prisma.MainPointCreateWithoutSermonInput[] | Prisma.MainPointUncheckedCreateWithoutSermonInput[]
  connectOrCreate?: Prisma.MainPointCreateOrConnectWithoutSermonInput | Prisma.MainPointCreateOrConnectWithoutSermonInput[]
  upsert?: Prisma.MainPointUpsertWithWhereUniqueWithoutSermonInput | Prisma.MainPointUpsertWithWhereUniqueWithoutSermonInput[]
  createMany?: Prisma.MainPointCreateManySermonInputEnvelope
  set?: Prisma.MainPointWhereUniqueInput | Prisma.MainPointWhereUniqueInput[]
  disconnect?: Prisma.MainPointWhereUniqueInput | Prisma.MainPointWhereUniqueInput[]
  delete?: Prisma.MainPointWhereUniqueInput | Prisma.MainPointWhereUniqueInput[]
  connect?: Prisma.MainPointWhereUniqueInput | Prisma.MainPointWhereUniqueInput[]
  update?: Prisma.MainPointUpdateWithWhereUniqueWithoutSermonInput | Prisma.MainPointUpdateWithWhereUniqueWithoutSermonInput[]
  updateMany?: Prisma.MainPointUpdateManyWithWhereWithoutSermonInput | Prisma.MainPointUpdateManyWithWhereWithoutSermonInput[]
  deleteMany?: Prisma.MainPointScalarWhereInput | Prisma.MainPointScalarWhereInput[]
}

export type MainPointUncheckedUpdateManyWithoutSermonNestedInput = {
  create?: Prisma.XOR<Prisma.MainPointCreateWithoutSermonInput, Prisma.MainPointUncheckedCreateWithoutSermonInput> | Prisma.MainPointCreateWithoutSermonInput[] | Prisma.MainPointUncheckedCreateWithoutSermonInput[]
  connectOrCreate?: Prisma.MainPointCreateOrConnectWithoutSermonInput | Prisma.MainPointCreateOrConnectWithoutSermonInput[]
  upsert?: Prisma.MainPointUpsertWithWhereUniqueWithoutSermonInput | Prisma.MainPointUpsertWithWhereUniqueWithoutSermonInput[]
  createMany?: Prisma.MainPointCreateManySermonInputEnvelope
  set?: Prisma.MainPointWhereUniqueInput | Prisma.MainPointWhereUniqueInput[]
  disconnect?: Prisma.MainPointWhereUniqueInput | Prisma.MainPointWhereUniqueInput[]
  delete?: Prisma.MainPointWhereUniqueInput | Prisma.MainPointWhereUniqueInput[]
  connect?: Prisma.MainPointWhereUniqueInput | Prisma.MainPointWhereUniqueInput[]
  update?: Prisma.MainPointUpdateWithWhereUniqueWithoutSermonInput | Prisma.MainPointUpdateWithWhereUniqueWithoutSermonInput[]
  updateMany?: Prisma.MainPointUpdateManyWithWhereWithoutSermonInput | Prisma.MainPointUpdateManyWithWhereWithoutSermonInput[]
  deleteMany?: Prisma.MainPointScalarWhereInput | Prisma.MainPointScalarWhereInput[]
}

export type MainPointCreatescriptureReferencesInput = {
  set: string[]
}

export type MainPointUpdatescriptureReferencesInput = {
  set?: string[]
  push?: string | string[]
}

export type MainPointCreateWithoutSermonInput = {
  id?: string
  title: string
  explanation: string
  scriptureReferences?: Prisma.MainPointCreatescriptureReferencesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MainPointUncheckedCreateWithoutSermonInput = {
  id?: string
  title: string
  explanation: string
  scriptureReferences?: Prisma.MainPointCreatescriptureReferencesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MainPointCreateOrConnectWithoutSermonInput = {
  where: Prisma.MainPointWhereUniqueInput
  create: Prisma.XOR<Prisma.MainPointCreateWithoutSermonInput, Prisma.MainPointUncheckedCreateWithoutSermonInput>
}

export type MainPointCreateManySermonInputEnvelope = {
  data: Prisma.MainPointCreateManySermonInput | Prisma.MainPointCreateManySermonInput[]
  skipDuplicates?: boolean
}

export type MainPointUpsertWithWhereUniqueWithoutSermonInput = {
  where: Prisma.MainPointWhereUniqueInput
  update: Prisma.XOR<Prisma.MainPointUpdateWithoutSermonInput, Prisma.MainPointUncheckedUpdateWithoutSermonInput>
  create: Prisma.XOR<Prisma.MainPointCreateWithoutSermonInput, Prisma.MainPointUncheckedCreateWithoutSermonInput>
}

export type MainPointUpdateWithWhereUniqueWithoutSermonInput = {
  where: Prisma.MainPointWhereUniqueInput
  data: Prisma.XOR<Prisma.MainPointUpdateWithoutSermonInput, Prisma.MainPointUncheckedUpdateWithoutSermonInput>
}

export type MainPointUpdateManyWithWhereWithoutSermonInput = {
  where: Prisma.MainPointScalarWhereInput
  data: Prisma.XOR<Prisma.MainPointUpdateManyMutationInput, Prisma.MainPointUncheckedUpdateManyWithoutSermonInput>
}

export type MainPointScalarWhereInput = {
  AND?: Prisma.MainPointScalarWhereInput | Prisma.MainPointScalarWhereInput[]
  OR?: Prisma.MainPointScalarWhereInput[]
  NOT?: Prisma.MainPointScalarWhereInput | Prisma.MainPointScalarWhereInput[]
  id?: Prisma.StringFilter<"MainPoint"> | string
  title?: Prisma.StringFilter<"MainPoint"> | string
  explanation?: Prisma.StringFilter<"MainPoint"> | string
  scriptureReferences?: Prisma.StringNullableListFilter<"MainPoint">
  createdAt?: Prisma.DateTimeFilter<"MainPoint"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MainPoint"> | Date | string
  sermonId?: Prisma.StringFilter<"MainPoint"> | string
}

export type MainPointCreateManySermonInput = {
  id?: string
  title: string
  explanation: string
  scriptureReferences?: Prisma.MainPointCreatescriptureReferencesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MainPointUpdateWithoutSermonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.StringFieldUpdateOperationsInput | string
  scriptureReferences?: Prisma.MainPointUpdatescriptureReferencesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MainPointUncheckedUpdateWithoutSermonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.StringFieldUpdateOperationsInput | string
  scriptureReferences?: Prisma.MainPointUpdatescriptureReferencesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MainPointUncheckedUpdateManyWithoutSermonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.StringFieldUpdateOperationsInput | string
  scriptureReferences?: Prisma.MainPointUpdatescriptureReferencesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type MainPointSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  explanation?: boolean
  scriptureReferences?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  sermonId?: boolean
  sermon?: boolean | Prisma.SermonDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mainPoint"]>

export type MainPointSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  explanation?: boolean
  scriptureReferences?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  sermonId?: boolean
  sermon?: boolean | Prisma.SermonDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mainPoint"]>

export type MainPointSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  explanation?: boolean
  scriptureReferences?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  sermonId?: boolean
  sermon?: boolean | Prisma.SermonDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mainPoint"]>

export type MainPointSelectScalar = {
  id?: boolean
  title?: boolean
  explanation?: boolean
  scriptureReferences?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  sermonId?: boolean
}

export type MainPointOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "explanation" | "scriptureReferences" | "createdAt" | "updatedAt" | "sermonId", ExtArgs["result"]["mainPoint"]>
export type MainPointInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sermon?: boolean | Prisma.SermonDefaultArgs<ExtArgs>
}
export type MainPointIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sermon?: boolean | Prisma.SermonDefaultArgs<ExtArgs>
}
export type MainPointIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sermon?: boolean | Prisma.SermonDefaultArgs<ExtArgs>
}

export type $MainPointPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MainPoint"
  objects: {
    sermon: Prisma.$SermonPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    explanation: string
    scriptureReferences: string[]
    createdAt: Date
    updatedAt: Date
    sermonId: string
  }, ExtArgs["result"]["mainPoint"]>
  composites: {}
}

export type MainPointGetPayload<S extends boolean | null | undefined | MainPointDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MainPointPayload, S>

export type MainPointCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MainPointFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MainPointCountAggregateInputType | true
  }

export interface MainPointDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MainPoint'], meta: { name: 'MainPoint' } }
  /**
   * Find zero or one MainPoint that matches the filter.
   * @param {MainPointFindUniqueArgs} args - Arguments to find a MainPoint
   * @example
   * // Get one MainPoint
   * const mainPoint = await prisma.mainPoint.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MainPointFindUniqueArgs>(args: Prisma.SelectSubset<T, MainPointFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MainPointClient<runtime.Types.Result.GetResult<Prisma.$MainPointPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MainPoint that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MainPointFindUniqueOrThrowArgs} args - Arguments to find a MainPoint
   * @example
   * // Get one MainPoint
   * const mainPoint = await prisma.mainPoint.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MainPointFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MainPointFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MainPointClient<runtime.Types.Result.GetResult<Prisma.$MainPointPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MainPoint that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MainPointFindFirstArgs} args - Arguments to find a MainPoint
   * @example
   * // Get one MainPoint
   * const mainPoint = await prisma.mainPoint.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MainPointFindFirstArgs>(args?: Prisma.SelectSubset<T, MainPointFindFirstArgs<ExtArgs>>): Prisma.Prisma__MainPointClient<runtime.Types.Result.GetResult<Prisma.$MainPointPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MainPoint that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MainPointFindFirstOrThrowArgs} args - Arguments to find a MainPoint
   * @example
   * // Get one MainPoint
   * const mainPoint = await prisma.mainPoint.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MainPointFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MainPointFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MainPointClient<runtime.Types.Result.GetResult<Prisma.$MainPointPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MainPoints that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MainPointFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MainPoints
   * const mainPoints = await prisma.mainPoint.findMany()
   * 
   * // Get first 10 MainPoints
   * const mainPoints = await prisma.mainPoint.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const mainPointWithIdOnly = await prisma.mainPoint.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MainPointFindManyArgs>(args?: Prisma.SelectSubset<T, MainPointFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MainPointPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MainPoint.
   * @param {MainPointCreateArgs} args - Arguments to create a MainPoint.
   * @example
   * // Create one MainPoint
   * const MainPoint = await prisma.mainPoint.create({
   *   data: {
   *     // ... data to create a MainPoint
   *   }
   * })
   * 
   */
  create<T extends MainPointCreateArgs>(args: Prisma.SelectSubset<T, MainPointCreateArgs<ExtArgs>>): Prisma.Prisma__MainPointClient<runtime.Types.Result.GetResult<Prisma.$MainPointPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MainPoints.
   * @param {MainPointCreateManyArgs} args - Arguments to create many MainPoints.
   * @example
   * // Create many MainPoints
   * const mainPoint = await prisma.mainPoint.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MainPointCreateManyArgs>(args?: Prisma.SelectSubset<T, MainPointCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MainPoints and returns the data saved in the database.
   * @param {MainPointCreateManyAndReturnArgs} args - Arguments to create many MainPoints.
   * @example
   * // Create many MainPoints
   * const mainPoint = await prisma.mainPoint.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MainPoints and only return the `id`
   * const mainPointWithIdOnly = await prisma.mainPoint.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MainPointCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MainPointCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MainPointPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MainPoint.
   * @param {MainPointDeleteArgs} args - Arguments to delete one MainPoint.
   * @example
   * // Delete one MainPoint
   * const MainPoint = await prisma.mainPoint.delete({
   *   where: {
   *     // ... filter to delete one MainPoint
   *   }
   * })
   * 
   */
  delete<T extends MainPointDeleteArgs>(args: Prisma.SelectSubset<T, MainPointDeleteArgs<ExtArgs>>): Prisma.Prisma__MainPointClient<runtime.Types.Result.GetResult<Prisma.$MainPointPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MainPoint.
   * @param {MainPointUpdateArgs} args - Arguments to update one MainPoint.
   * @example
   * // Update one MainPoint
   * const mainPoint = await prisma.mainPoint.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MainPointUpdateArgs>(args: Prisma.SelectSubset<T, MainPointUpdateArgs<ExtArgs>>): Prisma.Prisma__MainPointClient<runtime.Types.Result.GetResult<Prisma.$MainPointPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MainPoints.
   * @param {MainPointDeleteManyArgs} args - Arguments to filter MainPoints to delete.
   * @example
   * // Delete a few MainPoints
   * const { count } = await prisma.mainPoint.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MainPointDeleteManyArgs>(args?: Prisma.SelectSubset<T, MainPointDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MainPoints.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MainPointUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MainPoints
   * const mainPoint = await prisma.mainPoint.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MainPointUpdateManyArgs>(args: Prisma.SelectSubset<T, MainPointUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MainPoints and returns the data updated in the database.
   * @param {MainPointUpdateManyAndReturnArgs} args - Arguments to update many MainPoints.
   * @example
   * // Update many MainPoints
   * const mainPoint = await prisma.mainPoint.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MainPoints and only return the `id`
   * const mainPointWithIdOnly = await prisma.mainPoint.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MainPointUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MainPointUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MainPointPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MainPoint.
   * @param {MainPointUpsertArgs} args - Arguments to update or create a MainPoint.
   * @example
   * // Update or create a MainPoint
   * const mainPoint = await prisma.mainPoint.upsert({
   *   create: {
   *     // ... data to create a MainPoint
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MainPoint we want to update
   *   }
   * })
   */
  upsert<T extends MainPointUpsertArgs>(args: Prisma.SelectSubset<T, MainPointUpsertArgs<ExtArgs>>): Prisma.Prisma__MainPointClient<runtime.Types.Result.GetResult<Prisma.$MainPointPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MainPoints.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MainPointCountArgs} args - Arguments to filter MainPoints to count.
   * @example
   * // Count the number of MainPoints
   * const count = await prisma.mainPoint.count({
   *   where: {
   *     // ... the filter for the MainPoints we want to count
   *   }
   * })
  **/
  count<T extends MainPointCountArgs>(
    args?: Prisma.Subset<T, MainPointCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MainPointCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MainPoint.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MainPointAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MainPointAggregateArgs>(args: Prisma.Subset<T, MainPointAggregateArgs>): Prisma.PrismaPromise<GetMainPointAggregateType<T>>

  /**
   * Group by MainPoint.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MainPointGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MainPointGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MainPointGroupByArgs['orderBy'] }
      : { orderBy?: MainPointGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MainPointGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMainPointGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MainPoint model
 */
readonly fields: MainPointFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MainPoint.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MainPointClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  sermon<T extends Prisma.SermonDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SermonDefaultArgs<ExtArgs>>): Prisma.Prisma__SermonClient<runtime.Types.Result.GetResult<Prisma.$SermonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MainPoint model
 */
export interface MainPointFieldRefs {
  readonly id: Prisma.FieldRef<"MainPoint", 'String'>
  readonly title: Prisma.FieldRef<"MainPoint", 'String'>
  readonly explanation: Prisma.FieldRef<"MainPoint", 'String'>
  readonly scriptureReferences: Prisma.FieldRef<"MainPoint", 'String[]'>
  readonly createdAt: Prisma.FieldRef<"MainPoint", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"MainPoint", 'DateTime'>
  readonly sermonId: Prisma.FieldRef<"MainPoint", 'String'>
}
    

// Custom InputTypes
/**
 * MainPoint findUnique
 */
export type MainPointFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MainPoint
   */
  select?: Prisma.MainPointSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MainPoint
   */
  omit?: Prisma.MainPointOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MainPointInclude<ExtArgs> | null
  /**
   * Filter, which MainPoint to fetch.
   */
  where: Prisma.MainPointWhereUniqueInput
}

/**
 * MainPoint findUniqueOrThrow
 */
export type MainPointFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MainPoint
   */
  select?: Prisma.MainPointSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MainPoint
   */
  omit?: Prisma.MainPointOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MainPointInclude<ExtArgs> | null
  /**
   * Filter, which MainPoint to fetch.
   */
  where: Prisma.MainPointWhereUniqueInput
}

/**
 * MainPoint findFirst
 */
export type MainPointFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MainPoint
   */
  select?: Prisma.MainPointSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MainPoint
   */
  omit?: Prisma.MainPointOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MainPointInclude<ExtArgs> | null
  /**
   * Filter, which MainPoint to fetch.
   */
  where?: Prisma.MainPointWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MainPoints to fetch.
   */
  orderBy?: Prisma.MainPointOrderByWithRelationInput | Prisma.MainPointOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MainPoints.
   */
  cursor?: Prisma.MainPointWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MainPoints from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MainPoints.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MainPoints.
   */
  distinct?: Prisma.MainPointScalarFieldEnum | Prisma.MainPointScalarFieldEnum[]
}

/**
 * MainPoint findFirstOrThrow
 */
export type MainPointFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MainPoint
   */
  select?: Prisma.MainPointSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MainPoint
   */
  omit?: Prisma.MainPointOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MainPointInclude<ExtArgs> | null
  /**
   * Filter, which MainPoint to fetch.
   */
  where?: Prisma.MainPointWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MainPoints to fetch.
   */
  orderBy?: Prisma.MainPointOrderByWithRelationInput | Prisma.MainPointOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MainPoints.
   */
  cursor?: Prisma.MainPointWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MainPoints from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MainPoints.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MainPoints.
   */
  distinct?: Prisma.MainPointScalarFieldEnum | Prisma.MainPointScalarFieldEnum[]
}

/**
 * MainPoint findMany
 */
export type MainPointFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MainPoint
   */
  select?: Prisma.MainPointSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MainPoint
   */
  omit?: Prisma.MainPointOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MainPointInclude<ExtArgs> | null
  /**
   * Filter, which MainPoints to fetch.
   */
  where?: Prisma.MainPointWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MainPoints to fetch.
   */
  orderBy?: Prisma.MainPointOrderByWithRelationInput | Prisma.MainPointOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MainPoints.
   */
  cursor?: Prisma.MainPointWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MainPoints from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MainPoints.
   */
  skip?: number
  distinct?: Prisma.MainPointScalarFieldEnum | Prisma.MainPointScalarFieldEnum[]
}

/**
 * MainPoint create
 */
export type MainPointCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MainPoint
   */
  select?: Prisma.MainPointSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MainPoint
   */
  omit?: Prisma.MainPointOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MainPointInclude<ExtArgs> | null
  /**
   * The data needed to create a MainPoint.
   */
  data: Prisma.XOR<Prisma.MainPointCreateInput, Prisma.MainPointUncheckedCreateInput>
}

/**
 * MainPoint createMany
 */
export type MainPointCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MainPoints.
   */
  data: Prisma.MainPointCreateManyInput | Prisma.MainPointCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MainPoint createManyAndReturn
 */
export type MainPointCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MainPoint
   */
  select?: Prisma.MainPointSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MainPoint
   */
  omit?: Prisma.MainPointOmit<ExtArgs> | null
  /**
   * The data used to create many MainPoints.
   */
  data: Prisma.MainPointCreateManyInput | Prisma.MainPointCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MainPointIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MainPoint update
 */
export type MainPointUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MainPoint
   */
  select?: Prisma.MainPointSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MainPoint
   */
  omit?: Prisma.MainPointOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MainPointInclude<ExtArgs> | null
  /**
   * The data needed to update a MainPoint.
   */
  data: Prisma.XOR<Prisma.MainPointUpdateInput, Prisma.MainPointUncheckedUpdateInput>
  /**
   * Choose, which MainPoint to update.
   */
  where: Prisma.MainPointWhereUniqueInput
}

/**
 * MainPoint updateMany
 */
export type MainPointUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MainPoints.
   */
  data: Prisma.XOR<Prisma.MainPointUpdateManyMutationInput, Prisma.MainPointUncheckedUpdateManyInput>
  /**
   * Filter which MainPoints to update
   */
  where?: Prisma.MainPointWhereInput
  /**
   * Limit how many MainPoints to update.
   */
  limit?: number
}

/**
 * MainPoint updateManyAndReturn
 */
export type MainPointUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MainPoint
   */
  select?: Prisma.MainPointSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MainPoint
   */
  omit?: Prisma.MainPointOmit<ExtArgs> | null
  /**
   * The data used to update MainPoints.
   */
  data: Prisma.XOR<Prisma.MainPointUpdateManyMutationInput, Prisma.MainPointUncheckedUpdateManyInput>
  /**
   * Filter which MainPoints to update
   */
  where?: Prisma.MainPointWhereInput
  /**
   * Limit how many MainPoints to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MainPointIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MainPoint upsert
 */
export type MainPointUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MainPoint
   */
  select?: Prisma.MainPointSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MainPoint
   */
  omit?: Prisma.MainPointOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MainPointInclude<ExtArgs> | null
  /**
   * The filter to search for the MainPoint to update in case it exists.
   */
  where: Prisma.MainPointWhereUniqueInput
  /**
   * In case the MainPoint found by the `where` argument doesn't exist, create a new MainPoint with this data.
   */
  create: Prisma.XOR<Prisma.MainPointCreateInput, Prisma.MainPointUncheckedCreateInput>
  /**
   * In case the MainPoint was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MainPointUpdateInput, Prisma.MainPointUncheckedUpdateInput>
}

/**
 * MainPoint delete
 */
export type MainPointDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MainPoint
   */
  select?: Prisma.MainPointSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MainPoint
   */
  omit?: Prisma.MainPointOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MainPointInclude<ExtArgs> | null
  /**
   * Filter which MainPoint to delete.
   */
  where: Prisma.MainPointWhereUniqueInput
}

/**
 * MainPoint deleteMany
 */
export type MainPointDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MainPoints to delete
   */
  where?: Prisma.MainPointWhereInput
  /**
   * Limit how many MainPoints to delete.
   */
  limit?: number
}

/**
 * MainPoint without action
 */
export type MainPointDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MainPoint
   */
  select?: Prisma.MainPointSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MainPoint
   */
  omit?: Prisma.MainPointOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MainPointInclude<ExtArgs> | null
}
